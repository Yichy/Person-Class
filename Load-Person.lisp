(defun load-persons ()
    (with-open-file (str *path* :direction :input
                          :if-exists :append
                          :if-does-not-exist :create)
       (do ((buf (read-line str nil 'eof) (read-line str nil 'eof)))
           ((equal buf 'eof) t)
         (let ((split-buf (string-split-to-type (string-remove-after buf ";"))))
           (case (get-person-type buf)
             ('person (add-person (make-person (car split-buf) (nth 1 split-buf)
                                               (nth 2 split-buf) (nth 3 split-buf))))
             ('legal-person (add-person (make-person (car split-buf)
                                                     (nth 1 split-buf) (nth 2 split-buf)
                                                     (nth 3 split-buf)
                                                     :nationality (nth 4 split-buf))))
             ('real-person (add-person (make-person (car split-buf)
                                                    (nth 1 split-buf) (nth 2 split-buf)
                                                    (nth 3 split-buf)
                                                    :character (nth 4 split-buf))))
             ('real-legal-person (add-person (make-person (car split-buf)
                                                          (nth 1 split-buf) (nth 2 split-buf)
                                                          (nth 3 split-buf)
                                                          :character (nth 4 split-buf)
                                                          :nationality (nth 5 split-buf)))))))))
